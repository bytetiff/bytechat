package main

import (
	"log"
	"os"

	"github.com/bytetiff/bytechat/internal/db"
	"github.com/bytetiff/bytechat/internal/handlers"
	"github.com/bytetiff/bytechat/internal/middleware"
	"github.com/bytetiff/bytechat/internal/repository"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è Warning: .env file not found, using system environment variables")
	}

	// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbUser := os.Getenv("DB_USER")
	dbPass := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")
	jwtSecret := os.Getenv("JWT_SECRET")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
	if jwtSecret == "" {
		log.Fatal("‚ùå ERROR: JWT_SECRET is required but not set")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	pool, err := db.ConnectPostgres(dbHost, dbPort, dbUser, dbPass, dbName)
	if err != nil {
		log.Fatal("‚ùå ERROR: failed to connect to database:", err)
	}
	defer pool.Close()

	// –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	userRepo := repository.NewUserRepository(pool)

	// –°–æ–∑–¥–∞—ë–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å JWT
	refreshTokenRepo := repository.NewRefreshTokenRepository(pool)
	authHandler := handlers.NewAuthHandler(userRepo, refreshTokenRepo, []byte(jwtSecret))
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	authMiddleware := middleware.AuthMiddleware(refreshTokenRepo, []byte(jwtSecret))

	// –ì—Ä—É–ø–ø–∞ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
	r := gin.Default()
	protected := r.Group("/")
	protected.Use(authMiddleware)
	protected.GET("/profile", authHandler.Profile)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	r.POST("/register", authHandler.Register)
	r.POST("/login", authHandler.Login)
	r.POST("/refresh", authHandler.RefreshToken)
	r.POST("/logout", authHandler.Logout)

	log.Println("üöÄ ByteChat server is running on port 8080")
	if err := r.Run(":8080"); err != nil {
		log.Fatal(err)
	}
}
