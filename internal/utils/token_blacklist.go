package utils

import (
	"fmt"
	"sync"
	"time"
)

// ‚úÖ –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é `DB` –∏–∑ db.go
var mu sync.Mutex

// AddToBlacklist - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ "—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫" (PostgreSQL)
func AddToBlacklist(token string) {
	mu.Lock()
	defer mu.Unlock()

	fmt.Println("üö´ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (PostgreSQL):", token)

	query := `
        INSERT INTO token_blacklist (token, created_at)
        VALUES ($1, $2)
        ON CONFLICT (token) DO NOTHING
    `
	_, err := DB.Exec(query, token, time.Now())
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ blacklist:", err)
	}
}

// IsBlacklisted - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω (PostgreSQL)
func IsBlacklisted(token string) bool {
	mu.Lock()
	defer mu.Unlock()

	query := `SELECT EXISTS(SELECT 1 FROM token_blacklist WHERE token = $1)`
	var exists bool
	err := DB.QueryRow(query, token).Scan(&exists)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ blacklist:", err)
		return false
	}

	fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ '%s' –≤ blacklist ‚Üí %v\n", token, exists)
	return exists
}
